


sounds = "[east, <[percussion? SOPHIE_subs] <IGLOOGHOST_snares>!15 > ]" -- "SOPHIE_percussion IGLOOGHOST_kicks  east>"

bols soundFolder = inhabit [
            ("dha", n "0" # s soundFolder)
            , ("dhi", n "1" # s soundFolder)
            , ("ta", n "2" # s soundFolder)
            , ("ti", n "3" # s soundFolder)
            , ("ri", n "4" # s soundFolder)
            , ("ki", n "5" # s soundFolder)
            , ("na", n "6" # s soundFolder)
            , ("ge", n "7" # s soundFolder)
            , ("dhin", n "8" # s soundFolder)
            , ("ka", n "9" # s soundFolder)
            , ("tiri", n "10" # s soundFolder)
            , ("tirikit", n "10 22*2" # s soundFolder)
            , ("gha", n "11" # s soundFolder)
            , ("ghi", n "12" # s soundFolder)
            , ("na", n "13" # s soundFolder)
            , ("tha", n "14" # s soundFolder)
            , ("tin", n "15" # s soundFolder)
            , ("thi", n "16" # s soundFolder)
            , ("ra", n "17" # s soundFolder)
            , ("thin", n "18" # s soundFolder)
            , ("thi2", n "19" # s soundFolder)
            , ("ta2", n "20" # s soundFolder)
            , ("ti2", n "21" # s soundFolder)
            , ("te", n "22" # s soundFolder)
            , ("dhe", n "23" # s soundFolder)
            , ("ga", n "24" # s soundFolder)
            , ("tak", n "25" # s soundFolder)
            , ("ti3", n "26" # s soundFolder)
            , ("khi", n "27" # s soundFolder)
            , ("kath", n "31" # s soundFolder)
                        ]
withflip = within (0.75, 1) (fast 2)
withply = within (0.75, 1) (ply 2)

d1
    $ stack[
        silence
        ,
            whenmod 32 30 (sometimesBy 0.3 (jux (palindrome) . (# speed "-1"))) $
            bols "[east, <[percussion? SOPHIE_subs] <IGLOOGHOST_snares>!15 > ]" "dhi <na tiri ge> dhin ge <tirikit ti ra ga ta>"
        ,
            whenmod 8 2 (# silence) $
            sometimesBy 0.3 (jux (palindrome)) $
            sometimesBy 0.2 (# speed 2.2) $
            sometimes (withply) $ bols "[east, <[percussion? SOPHIE_subs] <IGLOOGHOST_snares>!15 > ]" "[ti|ri|ra|thi|tha|tin]*5"
    ] # cps 1.127 # room 0.2

d2 $ slow "4" $ s "{flute@6 flute@1 flute@1}%5" # n "{0@6 1@1 2@1}%5" # legato 1 # speed 1 # nudge "-0.08"

d4 $ slow 4 $ s "{~ hh}%5" # gain 2 # room 0.5

d5 $ slow 8 $ s "{808bd ~ 808bd ~ }%5" # gain 2 # speed 1 # room 0.5 # krush 4 # n 1 # up "-2"

d1 silence
d2 silence
d3 silence
d4 silence
d5 silence

-- Teental; (16 beats; 4-4-4-4)
d1 $ whenmod 32 30 (sometimesBy 0.3 (jux (palindrome) . (# speed "-1"))) $ slow 1 $ bols "[east, <[percussion? SOPHIE_subs] <IGLOOGHOST_snares>!15 > ]" "Dha dhin dhin dha dha dhin dhin dha Dha tin  tin  ta  na  dhin dhin dha"
-- Jhaptal; (10 beats; 2-3-2-3)
d1 $ whenmod 32 30 (sometimesBy 0.3 (jux (palindrome) . (# speed "-1"))) $ bols "Dhin na  dhin dhin na  tin na  dhin dhin na" # cps (0.635)

d1 $ whenmod 32 30 (sometimesBy 0.3 (jux (palindrome) . (# speed "-1"))) $ bols "ti ti na dhi na dhi na" # cps (0.635)


d1 $ whenmod 32 30 (sometimesBy 0.3 (jux (palindrome) . (# speed "-1"))) $ fast 1 $ bols "dhi <na tiri ge> dhin ge <tirikit ti ra ga ta>"  # room 0.1 -- # krush 5 -- # speed (slow 2 (range 0.9 1.1 perlin))

d2 $ whenmod 8 2 (# silence) $ sometimesBy 0.3 (jux (palindrome)) $ sometimesBy 0.2 (# speed 2.2) $ bols "[ti|ri|ra|thi|tha|tin]*5"


let chords  = ["[0, 4, 7]","[-1, 4, 8,]","[-3, 0, 4, 9]","[-5, 0, 4, 10]","[-9, 1, 6, 11]","[-8, 0, 7, 12]","[-6, 2, 4, 13]","[-7, 4, 9, 14]","[-8, 0, 7, 16]","[-4, 0, 7, 17]","[-9, 1, 6, 11, 18]","[-8, 0, 7, 14, 19]","[-7, 2, 10, 14, 20]","[-3, 5, 7, 12, 21]","[-5, 3, 5, 14, 22]","[-4, 3, 5, 13, 23]"]

d3 $ struct "{t}%16" $ arp "down" $ note (innerJoin $ (chooseBy "^chords1" chords)) <| s "midi*4"

d3 $ degradeBy "^degradeIt" $ struct "{t}%12" $ arp "down" $ note ((innerJoin $ (fast 1 (chooseBy "^chords1" chords)))+"[-12,0,12]") <| s "midi*<5 4 3>" # amp (range (0.0+"^midiVolume") (0.1+"^midiVolume") rand) # sustain (range 0.0 0.7 perlin) # cps "^tempo"

d3 $ degradeBy 0.1 $ struct "{t}%12" $ arp "down" $ note ((innerJoin $ (fast 1 (choose chords)))+"[-12,0,12]") <| s "midi*<5 4 3>" # amp (range 0.2 0.5 rand) # sustain (range 0.0 0.7 perlin)

d3 $ degradeBy 0.1 $ struct "{t}%12" $ arp "down" $ note ((innerJoin $ (fast 1 (choose chords)))+"[-12]") <| s "midi*<5 4 3>" # amp (range 0.2 0.5 rand) # sustain (range 0.0 0.7 perlin)

d3 $ degradeBy 0.1 $ struct "{t}%12" $ arp "down" $ note ((innerJoin $ (fast 1 (cycleChoose chords)))+"[-12]") <| s "midi*<5 4 3>" # amp (range 0.2 0.5 rand) # sustain (range 0.0 0.7 perlin)



d3 $ degradeBy "^degradeIt" $ struct "{t}%8" $ arp "down" $ note ((innerJoin $ (chooseBy (fast 2 (range 0 1 "<0 0.0625 0.125 0.1875 0.25 0.3125 0.375 0.4375 0.5 0.5625 0.625 0.6875 0.75 0.8125 0.875 0.95>")) chords))+"[-12]") <| s "midi*<5 4 3>" # amp (range (0.0+"^midiVolume") (0.1+"^midiVolume") rand) # sustain (range 0.0 0.7 perlin) # cps "^tempo"

d4 $ struct "{t}%12" $ arp "down" $ n ((innerJoin $ (chooseBy (fast 1 (range 0 1 "<0 0.0625 0.125 0.1875 0.25 0.3125 0.375 0.4375 0.5 0.5625 0.625 0.6875 0.75 0.8125 0.875 0.95>")) chords))+"[24]") <| s "rash*<3 5 4>" # gain (range 0.9 1 perlin) # cut 0

d4 silence

d1 $ s "~ hh ~ hh" # gain 1.6
d2 $ s "bd" # gain 1.2
setcps (135/60/4)

setcps "^tempo"

let chord whichChord modulo = do {
  parseBP_E ("{" ++ chords!!whichChord ++ "}" ++ "%" ++ modulo );
}

let firstFour = "0 4 7 -1 4 8 -3 0 4 9 -5 0 4 10"
let sixteen = "0 4 7 -1 4 8 -3 0 4 9 -5 0 4 10 -9 1"
let all = "0 4 7 -1 4 8 -3 0 4 9 -5 0 4 10 -9 1 6 11 -8 0 7 12 -6 2 4 13 -7 4 9 14 -8 0 7 16 -4 0 7 17 -9 1 6 11 18 -8 0 7 14 19 -7 2 10 14 20 -3 5 7 12 21 -5 3 5 14 22 -4 3 5 13 23"
let chord1 modulo= "0 4 7"       -- d f# a         D
let chord2  = "-1 4 8"        -- c# f# a#       F#
let chord3  = "-3 0 4 9"      -- b d f# b       b-
let chord4  = "-5 0 4 10"     -- a d f# c       D7
let chord5  = "-9 1 6 11"     -- f d# g# c#     Db
let chord6  = "-8 0 7 12"     -- f# d a d       D
let chord7  = "-6 2 4 13"     -- g# e f# d#     Emaj7
let chord8  = "-7 4 9 14"     -- g f# b e       e-
let chord9  = "-8 0 7 16"     -- f# d a f#      D
let chord10 = "-4 0 7 17"     -- a# d a g       g-
let chord11 = "-9 1 6 11 18"  -- f d# g# c# g#  Db
let chord12 = "-8 0 7 14 19"  -- f# d a e a     D
let chord13 = "-7 2 10 14 20" -- g e c e a#     C7
let chord14 = "-3 5 7 12 21"  -- b g a d b      G
let chord15 = "-5 3 5 14 22"  -- a f g e c      F
let chord16 = "-4 3 5 13 23"  -- a# f g d# c#   Eb9
