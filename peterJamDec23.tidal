p "midiclock" $ midicmd "midiClock*48" # s "midi"
once $ midicmd "stop" # s "midi"
d9 $ midicmd "start" # s "midi"
d5 silence

setcps (100/60/4)

d1 $ s "bd"

lock n offset = timeLoop n . ((offset |- (slow n $ run n)) <~)

-- old version
do
  let lkLength = 2
  let runOrRand = "<1 0>"
  let shiftAmount = (chooseBy "^shiftAmount" [1,2,3,5,6,13,21,34,55,89,144,233,377,610,987,1597])
  let octave = (chooseBy "^upperPitch" [0.5,1,2,4,8,16])
  let runAmount = [0,1..40]
  let sampleBank = (wchoose [("tabla",1.0), ("Rubber",0.1)])
  let playPat = (lock lkLength (parseBP_E ("<"++(unwords (map show [0 .. lkLength]))++">")) $ s sampleBank >|  n (select runOrRand [(parseBP_E ("{"++(unwords (map show runAmount ))++"}%^div")), (segment "^div" (irand 32))]))
  d1 $ loopAt 2 $ mask "t(^euc,^div)" $ chop 32 $ s "flute" # n "16" # room 0.7 # gain "^playFlute" # speed 1.55
  d2 $ slow 1 $ degradeBy "^degradeIt" $ (struct ("t(^euc,16)")) $ playPat |+| n shiftAmount # cut 1 # room 0.96 # speed octave # krush "1" # gain "^playTabla" # up 7 # orbit 1 # nudge (range "-0.01" "0.05" rand)
  d3 $ whenmod 1 "^fill" (const $ fast "<2 [2 3 3]>" $ s "gretsch" <| n (slow 1 "{0 1 2 3 4 5 6 7 8 9 10 11 12}%8") # gain (slow 2 (range 1.1 1.2 rand)) # room 0.4 # speed (slow 2 (range 3 5 saw))) $ fast 2 $ s "gretsch" <| n "[<13 22> ,[~ 19]/2]" # speed (range 2 5 "^upperPitch") # room 0.4 # gain "^playDrums"
  -- d4 $ s "~ SOPHIE_snaps:1?" # room 0.1 # nudge "-0.01" # gain "^playTabla" # speed "0.25"
  d4 $ s "~ tabla:9?" # room 0.4 # nudge "-0.01" # gain "^playTabla"  # speed (range 1 4 rand)
  -- d5 $ s "SOPHIE_fx_kicks:2?" # nudge "0.01" # gain "^playTabla"
  d6 $ s "tabla:23?" # nudge "0.01" # room 0.8 # gain "^playTabla" # speed "[0.5,1]"

-- poly version
do
  let lkLength =  2
  let runOrRand = "<0>"
  let shiftAmount = (chooseBy "^shiftAmount" [1,2,3,5,6,13,21,34,55,89,144,233,377,610,987,1597])
  let octave = (chooseBy "^upperPitch" [0.5,1,2,4,8,16])
  let rate = (chooseBy "^div" [4,8,16,32])
  let num = "{0..^div}%1"
  let runAmount = [0,1..(read "4")]
  let sampleBank = (wchoose [("tabla",1.0), ("Rubber",0.1)])
  let playPat = (lock lkLength (parseBP_E ("<"++(unwords (map show [0 .. lkLength]))++">")) $ s sampleBank >|  n (select runOrRand [(parseBP_E (num)), (segment "8" (irand 32))]))
  d1 $ loopAt 2 $ mask "t(^euc,^div)" $ chop 32 $ s "flute" # n "16" # room 0.7 # gain "^playFlute" # speed 1.55
  d2 $ slow 1 $ degradeBy "^degradeIt" $ playPat |+| n shiftAmount # cut 1 # room 0.96 # speed octave # krush "1" # gain "^playTabla" # up 7 # orbit 1 # nudge (range "-0.01" "0.05" rand)
  d3 $ whenmod 1 "^fill" (const $ fast "<2 [2 3 3]>" $ s "gretsch" <| n (slow 1 "{0 1 2 3 4 5 6 7 8 9 10 11 12}%8") # gain (slow 2 (range 1.1 1.2 rand)) # room 0.4 # speed (slow 2 (range 3 5 saw))) $ fast 2 $ s "gretsch" <| n "[<13 22> ,[~ 19]/2]" # speed (range 2 5 "^upperPitch") # room 0.4 # gain "^playDrums"
  -- d4 $ s "~ SOPHIE_snaps:1?" # room 0.1 # nudge "-0.01" # gain "^playTabla" # speed "0.25"
  d4 $ s "~ tabla:9?" # room 0.4 # nudge "-0.01" # gain "^playTabla"  # speed (range 1 4 rand)
  -- d5 $ s "SOPHIE_fx_kicks:2?" # nudge "0.01" # gain "^playTabla"
  d6 $ s "tabla:23?" # nudge "0.01" # room 0.8 # gain "^playTabla" # krush 4 # speed "[0.5,1]"

  "{"++(unwords (map show runAmount ))++"}%8"

vocals 0 1 0 0 -- hush volume0 volume1
iglooBeat 0 1 0 0 -- hush beat0 beat1 beat2
drums 0 1 1 -- hush lowOctave highOctave
bigBeat 0 1 2 0.185 -- hush gain slow degrade ***ONLY ONE SOUND***
glitch 0 1 1 1 -- hush glitch0 glitch1 glitch2
sophie 0 1 1 1 -- hush vol0 vol1 vol2
chordProg 0 0 0 -- hush prog-0-1-2 restart
climax 0 0 0 1 0 -- hush vol0 vol1 vol2 restart
moreDrums 0 1 1 1
morePerc "^perc0" "^perc1" "^perc2" "^perc3" "^perc4" "^perc5" "^perc6"

morePerc zero one two three four five six=
  do
    let rate = (chooseBy "^upperPitch" [1,2,4,8,16])
    p "morePerc0" $ degradeBy 0.3 $ s "{808bd:0 808sd:7 808bd:2}%16" # room "0.25" # crush (slow 4 (range 4 8 sine)) # gain zero # orbit 9
    p "morePerc1" $ fast 2 $ s "hh*2 hh*2 hh*2 <hh*6 [hh*2]!3>" # room 0.7 # gain ((range 1 1.2 rand)*one) # orbit 9
    p "morePerc2" $ rotL 1 $ degradeBy 0.35 $ every 4 (# n "30 20 10 6 7 25 11 13") $ s "tabla2*8" # n (run 8) # room "1" # gain ((range 0.85 1 rand)*two) # up "-1" # orbit 9 # speed rate
    p "morePerc3" $ rotL 1 $ degradeBy 0.35 $ (fast 2) $ every 4 (# n "30 20 10 6 7 25 11 13") $ s "tabla2*8" # n (run 8) # room "1" # gain ((range 0.85 1 rand)*three) # up "-1" # orbit 9 # speed rate
    p "morePerc4" $ rotL 1 $ degradeBy 0.0 $ s "{tabla2:0 tabla2:10 tabla2:20 tabla2:30 tabla2:34}%8" # room "1" # gain ((range 0.85 1 rand)*four) # up "-1" # orbit 9 # speed rate
    p "morePerc5" $ rotL 1 $ degradeBy 0.0 $ s "{tabla2:0 tabla2:10 tabla2:20 tabla2:30 tabla2:34}%16" # room "1" # gain ((range 0.85 1 rand)*five) # up "-1" # orbit 9 # speed rate
    p "morePerc6" $ fast 1 $ sometimes (struct "t(7,8)") $ struct "t*2 t*2 t*2 <t*6 [t*2]!3>" $ s "amencutup*16" # n (irand 32) # room 0.7 # gain ((range 0.9 1 rand)*six) # orbit 9 # speed (slow 2 (range 1 1.1 saw)) # krush 2 # nudge "-0.05"




pianoChords c2 ["@1","@2","@5","@1","@3","@2","@2"]
arpyChords c2 ["@1","@2","@5","@1","@3","@2","@2"]
pianoArp c2 ["@1","@2","@5","@1","@3","@2","@2"]
rashArp c2 ["@1","@2","@5","@1","@3","@2","@2"]

pianoChords c2 ["@1","@2","@5","@1","@2","@5"]
pianoArp c2 ["@1","@2","@5","@1","@2","@5"]
arpyChords c2 ["@1","@2","@5","@1","@2","@5"]

pianoChords c2 ["@1","@2","@6","@2","@5"]
pianoArp c2 ["@1","@2","@6","@2","@5"]

pianoChords c2 ["@1","@2","@6","@2","@4","@1"]
pianoArp c2 ["@1","@2","@6","@2","@4","@1"]
rashArp c2 ["@1","@2","@6","@2","@4","@1"]

d9 $ sometimesBy 0.7 (fast 4) $ struct "[t(3,4,1)]"$ fast 4 $ s "midi" # n "[-4,<-30 [-28,10] [-24,12]>]" # amp (range 0.5 1 rand)

d10 $ s "midi" # n "<a2 bf2 fs2 f2>" # amp 0.7

d2 $ sound "casio:1*4 casio:1*4 casio:1*4 <casio:1*9 [casio:1*4]!3>" # up "-6" # slow 4 (speed (range 1 1.5 saw )) # gain (range 0.8 1.1 rand) # room 0.5 # size 0.5 -- # nudge (slow 4 (range 0.1 0.2 saw))





-- Dmaj, Dbmaj/f, Dmaj7, Amaj7, Bmaj, f#min, Amaj/c#

d1 silence
d2 silence
d3 silence
d4 silence
d5 silence
p "piano" silence
p "arpy" silence
p "rashArp" silence
p "pianoArp"

pianoChords :: [Char] -> [String] -> IO ()
pianoChords progression rhythms=
  do
    let chords = do {
      if length (rhythms) < length (words progression)
        then do
          take (length rhythms) (words progression)
      else do
          (words progression)
      }
    let combined = merge chords rhythms
    let final = unwords combined
    p "piano" $ density "^playPiano" $ s "midi" <| n (parseBP_E final+"-2")  # amp (range (0.0+"^midiVolume") (0.1+"^midiVolume") (rand)) -- # nudge "-0.01"

arpyChords :: [Char] -> [String] -> IO ()
arpyChords progression rhythms=
  do
    let chords = do {
      if length (rhythms) < length (words progression)
        then do
          take (length rhythms) (words progression)
      else do
          (words progression)
      }
    let combined = merge chords rhythms
    let final = unwords combined
    p "arpy" $ degradeBy "^degradeIt" $ density 0.25 $ s "arpy" <| up (parseBP_E final+"-2") # room 0.7 # orbit 1 # gain "^arpyVolume"


rashArp :: [Char] -> [String] -> IO ()
rashArp progression rhythms=
  do
    let chords = do {
      if length (rhythms) < length (words progression)
        then do
          take (length rhythms) (words progression)
      else do
          (words progression)
      }
    let combined = merge chords rhythms
    let final = unwords combined
    p "rashArp" $ density "^playRashArp" $ arp "down" $ s "rash" <| up (parseBP_E final+"-2") # room 0.7 # orbit 1 # gain 1 # speed "16"

pianoArp :: [Char] -> [String] -> IO ()
pianoArp progression rhythms=
  do
    let chords = do {
      if length (rhythms) < length (words progression)
        then do
          take (length rhythms) (words progression)
      else do
          (words progression)
      }
    let combined = merge chords rhythms
    let final = unwords combined
    p "pianoArp" $ density "^playPianoArp" $ arp "down" $ s "midi" <| n (parseBP_E final+"-2") # amp (range (0.0+"^midiVolume") (0.1+"^midiVolume") (rand)) -- # nudge "-0.01"



  allRunAmounts = [
    "<16 <4 3> 16 8>", -- 0
    "<32!2 8 16>", -- 1
    "<15 30>" -- 2
    ]
  allLocations = [
    "2", -- 0
    "14", -- 1
    "15", -- 2
    "21", -- 3
    "24", -- 4
    "32" -- 5
    ]
  allGainBases = [
    "1", -- 0
    "1(3,8)", -- 1
    "{1(2,5)}%5", -- 2
    "1(12,16)", -- 3
    "{1(2,5)}%15" -- 4
    ]
  allGainMults = [
    "1", -- 0
    "0", -- 1
    "<[1]!3 [1 <1 0>]>", -- 2
    "<[1] [1 <1 0>]>", -- 3
    "<1 [1 1 1? 0] 1 [1 0 1 0]>" -- 4
    ]
  heartChant r l b m =
    do
      let runAmounts = allRunAmounts!!r
      let location = allLocations!!l
      let gainBase = allGainBases!!b
      let gainMult = allGainMults!!m
      p "heartChant" $ swingBy (1/3) 16 $ slice 240 (segment 16 ((run 32)*(run runAmounts)+(location)))  $ sound "aaron*240" # cut 1 # orbit 11 # room 0.1 # up "-1" # gain (gainBase*gainMult) # nudge "0.02"

  heartChant 0 0 1 0
  heartChant 0 0 2 0
  heartChant 0 0 4 0
  heartChant 2 0 2 3
  heartChant 2 0 0 0
  heartChant 1 5 3 0
  heartChant 0 1 0 0
  heartChant 0 2 0 0
  heartChant 0 3 0 0
  heartChant 0 4 0 0
  heartChant 0 0 0 4

  heartChant 0 0 0 2
  heartChant 0 0 0 1

  chordProg 0 0 0

  p "heartChant" $ sometimesBy ("^degradeIt2"*"^degradeIt2"*"^degradeIt2") (selectF "^degradeIt2"[(# gain (((segment 4 (irand 2)))*0.9)), (# gain 0)]) $ lock 1 "^choosePat" $ slow 2 $ slice 240 (segment ("^segments"+1) (irand 240)) $ sound "aaron*240" # cut 1 # orbit 11 # room 0.4 # size "0.0" # nudge 1.8 # up "2" # gain (0.9) # speed 1 # djf 0.45


  p "heartChant" silence
