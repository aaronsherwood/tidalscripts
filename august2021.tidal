setcps(85/60/4)


p "piano" $ density 0.25 $ struct "t@5 t@4 t@3 t@4 t@5 t@4 t@3 t@4" $ n our  # s "midi" # amp 0.7
p "piano1" $ density 0.25 $ struct ("t*80?")$ n "[g4,c5,d5,e3]@5 [f4,as4,ds5,g3]@4 [g4'sus2,b3]@3 [fs4'sus2,as3]@6 [ds4,gs4,cs5,f3]@7 [e4'sus2,gs3]@6 [fs4,b4,cs5,ds3]@5 [gs4'sus2,c4]@4" # s "midi" # amp (range 0.5 0.7 (rand)) # nudge "-0.01"
p "piano" $ density 0.25 $ struct "t@5 t@4 t@3 t@6 t@7 t@6 t@5 t@4" $ s "[kalimba:0 , kalimba:1]" <| up (parseBP_E a2) # room 0.7 # orbit 3 # gain 0.8

p "piano" $ density 0.25 $ struct "t@5 t@4 t@3 t@6 t@7 t@6 t@5 t@4" $ s "[kalimba:0 , kalimba:1]" <| up (parseBP_E a2) # room 0.7 # orbit 3 # gain 0.8

(read a2 :: string)

p "piano" $ density 0.25 $ n "[g4,c5,d5,e3]@5 [f4,as4,ds5,g3]@4 [g4'sus2,b3]@3 [fs4'sus2,as3]@6 [ds4,gs4,cs5,f3]@7 [e4'sus2,gs3]@6 [fs4,b4,cs5,ds3]@5 [gs4'sus2,c4]@4" # s "plaits"
  # engine 7
  # harm 0.9 --(range 0.18 1.0 $ perlin)
  # timbre 0.7 -- (slow 2 tri)
  # morph 0.1
  # room 0.9
  # sustain 5 -- (range 0 1 (saw))
  # gain (range 0.6 0.65 (saw))

p "piano" silence

p "deerhoof" $ density 2 $ press $ s "33:3" # up (slow 4 (c+1)) # room 0.5 # gain 1 # speed "1" # nudge "-0.01"
p "deerhoof" silence

rhythms = ["@5","@4","@3","@6","@7","@6","@5","@4"]
d1 $ s (step "monomachine" "x x 12 ")
hush
d1 $ sometimesBy 0.05 (stripe 3) $ s "[monomachine:77@4 monomachine:77@3]*8" # speed (slow 2 (range 8 4 (square))) # gain (range 0.75 0.7 (rand)) # room 0.2
d2 $ press $ s "<monomachine:98*2>" # gain 1.1 # nudge "0.02" # speed (slow 2 (range 8 0.5 (isaw)))

d6 $ s "monomachine:24*16" # gain (range 0.7 1.1 (rand))
d4 $ rotL 1 $ every 4 (degradeBy 0.7) $ struct "t(<17 16 6 8>,32)" $ s "{monomachine}%32" # n ((run 50)+"<60>") # room 0.4 # gain 1 # cut 1 # speed ("4 2"*(slow 4 (range 1 0.5 saw))*"1")
d4 $ rotL 1 $ every 4 (degradeBy 0.7) $ struct "t(8,16)" $ s "{monomachine}%32" # n ((run 50)+"<60>") # room 0.4 # gain 1 # cut 1 # speed ("4 2"*(slow 4 (range 1 0.5 saw))*"1")

d4 $ rotL 1 $ every 4 (degradeBy 0.8) $ s "monomachine*16" # n "14" # room 0.4 # gain 0.9 # cut 1 # speed ((run 8)*(slow 4 (range 1 0.5 isaw))*"1")
d5 $ rotL 1 $ every 4 (# speed 0.5) $ someCyclesBy 0.74 (degrade)$ s "[[monomachine:0!2] [~ monomachine:0@3] [monomachine:0] ~]" # gain 1.2 # speed (range 1 0.125 (saw)) # krush 10 # room 0.7 # nudge "-0.01"
xfade 6 $ loopAt 1 $ s "monomachine:103" # gain 1.4 # speed "1"
d6 $ loopAt 1 $ s "monomachine:103" # gain 1.4 # speed "2"
d7 $ slow 2 $ s "~ monomachine:148 ~ ~ ~ ~ ~ ~" # room 0.5 # gain 1 # speed 0.5
p "deerhoof" $ density 2 $ press $ s "33:3" # up (slow 4 (c)) # room 0.5 # gain 1 # speed "1" # nudge "-0.01"
p "deerhoof2" $ density 2 $ s "33:3(7,16)" # up (slow 4 (c+1)) # room 0.5 # gain (range 0.5 0.9 rand) # speed ("4 2"*(slow 4 (range 1 1 saw))*"1") -- # cut 1
p "deerhoof2" $ density 2 $ s "33:3(11,16)" # up (slow 4 (c)) # room 0.5 # gain (range 0.5 0.9 rand) # speed ("4 2"*(slow 4 (range 1 1 saw))*"1")
p "deerhoof2" silence
d5 $ rotL 1 $ every 16 (linger 0.25) $ s "[feel:6 ~ ~ ~ feel?] [~] [~ ~ <feel:6 feel> ~ ~] [~ ~ ~ ~ ~ ~ feel?]" # room 0.95 # speed (slow 4 (range 4 0.5 (saw))) # nudge "-0.027" # gain 1.2 # squiz 1.001 # up "2"
d3 silence
d5 $ rotL 1 $ every 4 (# speed 2) $ s "monomachine:147(<7 3>,16)" # gain 1.2 # room 0.5 # speed (slow 1 (range 4 1 (saw))) # nudge "-0.027"
d3 $ density 2 $ jux (brak) $ s "arpy*4" # up (arp "pinkyupdown" a) # nudge 0.03 # gain 1 # room 0.5 # krush 2
d4 $ ccn "{1*128}%10" # ccv (range 127 0 $ slow 2 isaw) # s "midi"

p "bend" $ slow 1 $ midibend (struct "t*256" $ (range 8000 9000 $ tri)) # s "midi"

p "bend" silence

hush

d3 $ slow 16 $ sound $ step' ["monomachine:33", "monomachine:34", "monomachine:35"]
(take 512 $ lindenmayer 5 "0:1~~~,1:0~~~2~~~~~0~~~2~,2:2~1~,~:~~1~"
"0")

d6


d3 silence
sloppy10
cleanSlop "clutch"

improviseChords c2 "org" "midi" ["@2","@1","@5","@2","@1","@5"]
improviseChords b2 "org" "midi" ["@2","@2","@1","@5","@2","@2","@1","@5"]

improviseChords b2 "org" "midi" ["@5","@4","@3","@6","@7","@6","@5","@4"]

improviseChords :: [Char] -> [Char] -> [Char] -> [String] -> IO ()
improviseChords progression org which rhythms=
  do
    if org == "org"
      then do
      let chords = do {
        if length (rhythms) < length (words progression)
          then do
            take (length rhythms) (words progression)
        else do
            (words progression)
        }
      let combined = merge chords rhythms
      let final = unwords combined
      if which == "midi"
        then
          p "piano" $ density 0.25 $ s (parseBP_E which) <| n (parseBP_E final) # amp (range 0.86 0.9 (rand)) # nudge "-0.01"
        else
          p "piano" $ density 0.25 $ s (parseBP_E which) <| up (parseBP_E final) # room 0.7 # orbit 3 # gain 0.7 # nudge "-0.01"
    else do
      let chords = "{"++progression++"}%<"++org++">"
      let ts = replicate (length rhythms) "t"
      let pat = unwords (merge ts rhythms)
      if which == "midi"
        then do
          p "piano" $ density 0.25 $ struct (parseBP_E pat) $ s (parseBP_E which) <| n (parseBP_E chords) # amp (range 0.86 0.9 (rand))
        else
          p "piano" $ density 0.25 $ struct (parseBP_E pat) $ s (parseBP_E which) <| up (parseBP_E chords) # room 0.7 # orbit 3 # gain 0.7 # nudge "-0.01"

hush

d1 $ s "SOPHIE_fx_kicks(3,8)" # n "<1@3 [4 3]>" # gain 3 # room 0.4
d2 $ s "[~ SOPHIE_percussion]*2" # n 5 # gain 1 # nudge "-0.02"
d3 $ every 4 (slow 2) $ s "[SOPHIE_hihats!4] [[SOPHIE_hihats*4] SOPHIE_hihats!2] [SOPHIE_hihats!2 [SOPHIE_hihats*4?]] [SOPHIE_hihats!4]" # n "<1 1 1 0>" # gain (range 0.8 1 rand)
d3 $ every 4 (slow 2) $ s "[SOPHIE_hihats!4] [[SOPHIE_hihats*4] SOPHIE_hihats!2] [SOPHIE_hihats!2 [SOPHIE_hihats*4?]] [SOPHIE_hihats!4]" # n "<0>" # gain (range 0.8 1 rand) # djf (slow 4 (range 0.2 0.9 (saw)))

d4 $ slow 4 $ jux (# speed 0.5) $ jux (# cut 1) $ s "IGLOOGHOST_vocals:3*16" # up " 1 2 4 6" # gain 0.7 # speed "-1" # room 0.6
d4 $ sometimes (rev) $ sound "arpy*8" # n (run 8) # krush 1 # room 0.2 # phasr "10" # phasdp 1
d5 $ every 4 (const $ s "jvbass*8" # n (run 4) # room "1.5" # gain "1" # up "-1") $ whenmod 8 4 (const $ s "jvbass*8" # n (run 7) # room "1.5" # gain "1" # up "-1") $ s "jvbass*8" # n (run 14) # room "1.5" # gain "1" # up "-1"
d6 $ jux (striate 2) $ sometimes (rev) $ every 4 (const $ sound "arpy*12" # n (run 11) # speed "1") $ sound "arpy*8" # n (run 8) # room "0.3"

d7 $ density 1 $ loopAt 1 $ degradeBy 0.4 $ mask "t(5,<6 7 8>)" $ splice 8 "[<0*3? 0*2?> 3 2 4] [4 .. 7]" $ s "33:28" # speed 0.5 # gain 1.2 -- # nudge "-0.025"-- # delayIn
d1 $ s "SOPHIE_fx_kicks:2 ~ ~ [~@4 <808bd:1 ~>]" # gain 4 # nudge "0.02"

d1 $ s "[SOPHIE_fx_kicks:2(3,8),~ ~ ~ [~@4 <808bd:1 ~>]]" # gain 4 # nudge "0.02"

d9 $ loopAt 8 $ chop 32 $ s "IGLOOGHOST_loops:15" # gain 0.8
d8 $ density 1 $ loopAt 4 $ degradeBy 0.0 $ mask "t(5,<6 7 8>)" $ splice 8 "[<0*3? 0*2?> 3 2 4] [4 .. 7]" $ s "IGLOOGHOST_loops:15" # speed 0.5 # delayIn
d8 $ density 1 $ n ("[[<c2 c2 a2 a2 b2 b2 g2 g2> e3 g4 c5 c4 c3 e3 g4],<[c2,e3,g3]@2 [c2,e3,a2]@2 [c2,f3,a2]@2 [b2,e3,g2]@2>]*2"+24) # s "[supersaw, superpwm]" # gain 0.6 # room 0.3 # resonance 0.0 -- # phasr "7" # phasdp 0.5
d8 $ density 1 $ n ("[<[c2,e3,g3]@2 [c2,e3,a2]@2 [c2,f3,a2]@2 [b2,e3,g2]@2>]*2"+36) # s "[supersaw]" # gain 0.6 # room 0.95 # size 0.95 # resonance 0.0
d9 $ density 2 $ n (scale "major" ("<0 .. 15 8 9 <10 8>>")) # s "[supersaw]" # gain 0.5 # room 0.95 # size 0.95
d9 $ density 2 $ n (scale "major" ("8 8 7 5 4 3 0 0")) # s "[supersaw]" # gain 0.6 # room 0.95 # size 0.95

d8 $ density 1 $ n ("[<[c2,e3,g3]@2 [c2,e3,a2]@2 [c2,f3,a2]@2 [b2,e3,g2]@2>]*2"+24) # s "midi"
d8 $ density 2 $ n ("[[<c2 c2 a2 a2 b2 b2 g2 g2> e3 g4 c5 c4 c3 e3 g4],<[c2,e3,g3]@2 [c2,e3,a2]@2 [c2,f3,a2]@2 [b2,e3,g2]@2>]*1"+24)  # s "midi"
hush
d9 silence

d1 $ drumMachine "<univoxmicrorhythmer12>" [
    s "[~perc:0]*2" # note 7
    ,s "bd:4(3,8)"
    ,s "~[cp,sd:2]"
    ,s "hh!5 <[hh*4?] [hh]> hh!2"
]

d1 $ drumFrom "CasioRZ1" "bd*2"

d8 $ n ("[<c2 c2 a2 a2 b2 b2 g2 g2> e3 g4 c5 c4 c3]*4") # s "superfm" # voice 0 # ratio1 8 # gain 0.8 # room 0.9 # delayIn
# amp1 1
# amp2 0
# amp3 1
# amp4 0
# amp5 0
# amp6 0
# ratio2 0.1
# mod12 0.75
# mod34 0.7
# mod45 0.6

-- sets the amount of operator 'op' in the superfm output mix
-- (1 <= op <= 6)
fmamp :: Int -> Pattern Double -> ControlPattern
fmamp op = pF ("amp" ++ show op)

-- sets the ratio for operator 'op'.
-- the frequency is note * ratio + detune Hz
-- (1 <= op <= 6)
fmratio :: Int -> Pattern Double -> ControlPattern
fmratio op = pF ("ratio" ++ show op)

-- set the detune for operator 'op'
fmdetune :: Int -> Pattern Double -> ControlPattern
fmdetune op = pF ("detune" ++ show op)

-- set the modulation of oerator opa by operator opb
-- if opa == opb, then the modulation amount is multiplied by the
-- 'feedback' parameter
fmmod :: Int -> Int -> Pattern Double -> ControlPattern
fmmod opa opb = pF ("mod" ++ show opa ++ show opb)

-- feedback
fmfeedback :: Pattern Double -> ControlPattern
fmfeedback = pF "feedback"

d8 $ stut 2 0.7 0.125 $ slow 3 $ s "superfm"
  |+| note (arp "pinkyup" "[0,4,7,12] [0,5,7,9]" )
  # fmfeedback 1    -- global multiplier for 'fmod x x' feedback parameters.
  # fmamp 1 1      -- amplitudes default to '1', so probably need to set all 6 of them...
  # fmamp 2 0
  # fmamp 3 1
  # fmamp 4 0
  # fmamp 5 0
  # fmamp 6 0
  # fmratio 1 1 -- oscillator frequency is note * ratio + detune Hz.
  # fmratio 2 0.5 -- (range 0.25 20 (slow 3 $ sine))
  # fmdetune 2 1
  # fmratio 3 0.26
  # fmmod 1 1 "0"
  # fmmod 1 2  (range 0 4 (slow 4 $ sine))   -- fmod a b Pattern  = modulate op a with op b..
  # fmmod 1 3  (range 0 4 (slow 3 $ sine))
  # fmmod 3 2  (range 0 3 (slow 2 $ sine))
  # fmeglevel 1 1 "1" -- envelope generator has 4 rates and 4 steps for each operator...
  # fmeglevel 1 2 "0.5"
  # fmeglevel 1 3 "0"
  # fmeglevel 1 4 "0"
  # fmegrate 1 1 "10"
  # fmegrate 1 2 "0.1"
  # fmegrate 1 3 "0.1"
  # fmegrate 1 4 "1"
  # fmeglevel 2 1 "1" -- envelope generator has 4 rates and 4 steps for each operator...
  # fmeglevel 2 2 "0"
  # fmeglevel 2 3 "0"
  # fmeglevel 2 4 "0"
  # fmegrate 2 1 "1"
  # fmegrate 2 2 "0.3"
  # fmegrate 2 3 "0.7"
  # fmegrate 2 4 "1"
  # fmeglevel 3 1 "1" -- envelope generator has 4 rates and 4 steps for each operator...
  # fmeglevel 3 2 "0.2"
  # fmeglevel 3 3 "0"
  # fmeglevel 3 4 "1"
  # fmegrate 3 1 "10"
  # fmegrate 3 2 "0.5"
  # fmegrate 3 3 "0.4"
  # fmegrate 3 4 "1"
  # room 0.3

d8
    $ stut 2 0.7 0.125
    $ slow 3 $ s "superfm"
    |+| note (arp "pinkyup" "[0,4,7,12] [0,5,7,9]" )
    # fmfeedback 1
    # lfma [1, 1, 1, 0, 0, 0]
    # lfmr [1, (range 0 4 (slow 4 sine)), 0.26, 0.5, 0.5, 0.5]
    # lfmd [0, 1, 0, 0, 0, 0]
    # fmmod 1 1 "<0 1.25>"
    # fmmod 1 2 (range 0 4 (slow 4 sine))
    # fmmod 1 3 (range 0 4 (slow 3 saw))
    # fmmod 3 2 (range 0 3 (slow 2 sine))
    # lfmel 1 [1, 0.5, 0, 0, 0, 0]
    # lfmer 1 [10, 0.1, 0.1, 1, 0, 0]
    # lfmel 2 [1, 0, 0, 0, 0, 0]
    # lfmer 2 [1, 0.3, 0.7, 1, 0, 0]
    # lfmel 3 [1, 0.2, 0, 1, 0, 0]
    # lfmer 3 [10, 0.5, 0.4, 1, 0, 0]
    # lpf 1000
    # room 0.3

-- Parameters
let fmamp op = pF ("amp" ++ show op)
    fmratio op = pF ("ratio" ++ show op)
    fmdetune op = pF ("detune" ++ show op)
    fmmod opa opb = pF ("mod" ++ show opa ++ show opb)
    fmegrate op step = pF ("egrate" ++ show op ++ show step)
    fmeglevel op step = pF ("eglevel" ++ show op ++ show step)
    fmfeedback = pF "feedback"

-- Array functions
let fmparam function = foldr (#) (gain 1) . zipWith function [1..]
    lfma = fmparam fmamp
    lfmr = fmparam fmratio
    lfmd = fmparam fmdetune
    lfmer op = fmparam (fmegrate op)
    lfmel op = fmparam (fmeglevel op)
    lfmm opa = fmparam (fmmod opa) -- didn't test, should work

d8 $ stut 2 0.7 0.125 $ s "superfm"
  |+| note (arp "pinkyup" "[0,4,8,12] [0,3,7,11]" )
  # fmfeedback 1
  # fmdetune 2 1
  # lfmel 1 [1, 0.5, 0, 0]     -- EG Level (Operator 1)
  # lfmer 1 [10, 0.1, 0.1, 1]  -- EG Rate (Operator 1)
  # lfmel 2 [1, 0, 0, 0]       -- EG Level (Operator 2)
  # lfmer 2 [1, 0.3, 0.7, 1]   -- EG Rate (Operator 2)
  # lfmel 3 [1,0.2,0,1]        -- EG Level (Operator 3)
  # lfmer 3 [10,0.5,0.4,1]     -- EG Rate (Operator 3)
  # lfma [1, 1, 0, 0, 0, 1]    -- Amps (Operators 1..6)
  # lfmr [1, 0.26, 0.5]        -- Ratios (Operators 1..3)

d8 $ n (scale "bhairav" (irand 7)) # s "superfm" # voice (irand 5) # gain 0.9 # room 0.9 # delayIn

let ratio2 = pF "ratio2"
hush
sloppy10
"[g4,c5,d5,e3]@5 [f4,as4,ds5,g3]@4 [g4'sus2,b3]@3 [fs4'sus2,as3]@6 [ds4,gs4,cs5,f3]@7 [e4'sus2,gs3]@6 [fs4,b4,cs5,ds3]@5 [gs4'sus2,c4]@4"
cleanSlop "off"
d4 $ loopAt 2 $ s "33:28" # gain 1.2
p "slop3" $ slow 2 $ degradeBy 0.0 $ s "{SOPHIE_subs:1(5, 16)}" # gain 2 # orbit 2 # nudge "0.02"
p "slop3" silence
d1 silence
p "lovano1" silence
clutch "slop1" silence

"t@5 t@4 t@3 t@6 t@7 t@6 t@5 t@4"
clutch "slop3" silence
p "slop1" $ slow 4 $ struct "t@9 t@3 t@6 t@13 t@5 t@4" $ s "dr_few*32" # room 0.95 # krush 20 # gain "1" # nudge "-0.01" # up (slow 0.125 ("<9 12 16 15 10 13 8 17>"+1)) # speed "<0.5 1> <2 4>" # gain 0.8 # nudge 0.01

d1 $ press $ s "{hh}%5" # gain (range 1.3 1.2 rand) # room 0.5
d2 $ slow 2 $ press $ s "<monomachine:62*5>" # gain 1.1 # room 0.3-- # speed 0.5
d3 $ press $ s "<monomachine:264*5>" # gain 1.1 # cut 1 -- # orbit 6
d4 $ slow 2 $ press $ s "{monomachine:148 monomachine:149}%5" # room 0.1 # gain 0.8
d5 $ s "{~ [~@4 monomachine:28]}%5?" # gain 1.4 # cut 1 # room 0.3 # speed "1"

sloppy10 = do
  p "slop1" $ slow 2 $ degradeBy 0.62 $ s "dr_few ~ [~ dr_few] ~ dr_few dr_few ~ [~ dr_few] ~ dr_few dr_few ~ [~ dr_few] ~ ~ dr_few ~ [~ dr_few] ~ dr_few" # room 0.9 # krush 20 # nudge "-0.01" # gain 1 # nudge 0.01  # speed (("{0.375 0.75}")) # up 9 # orbit 3-- # up ( ("<9 12 16 15 10 13 8 17>"+1))
  xfade "slop2" $ slow 2 $ jux rev $ s "{808:3?}%40" # speed "2" # gain (range 0.5 1.1 (rand)) # nudge "-0.01" # room 0.07 # orbit 2-- # speed (slow 4 (range 8 6 (saw)))
  p "slop3" $ degradeBy 0.0 $ s "{808bd}%5" # gain 2 # orbit 2 # krush 20
  p "lovano2" $ slow 2 $ slice 18 "<9 9 9 9 9 9 9 9 9 9>*10" $ s "33:28" # gain 0.85 # speed "2" # room 0.5 # up 1 # nudge "0.02"
  p "lovano1" $ slow 2 $ jux rev $ slice 16 "<0 1 1 0 1 0 0 1 1 1>*40" $ s "33:28*40" # room 0.5 # gain 1.2 # speed "8" # up 0 # cut 1


  -- modulators
let mod11 = pF "mod11"
    mod12 = pF "mod12"
    mod13 = pF "mod13"
    mod14 = pF "mod14"
    mod15 = pF "mod15"
    mod16 = pF "mod16"
    mod21 = pF "mod21"
    mod22 = pF "mod22"
    mod23 = pF "mod23"
    mod24 = pF "mod24"
    mod25 = pF "mod25"
    mod26 = pF "mod26"
    mod31 = pF "mod31"
    mod32 = pF "mod32"
    mod33 = pF "mod33"
    mod34 = pF "mod34"
    mod35 = pF "mod35"
    mod36 = pF "mod36"
    mod41 = pF "mod41"
    mod42 = pF "mod42"
    mod43 = pF "mod43"
    mod44 = pF "mod44"
    mod45 = pF "mod45"
    mod46 = pF "mod46"
    mod51 = pF "mod51"
    mod52 = pF "mod52"
    mod53 = pF "mod53"
    mod54 = pF "mod54"
    mod55 = pF "mod55"
    mod56 = pF "mod56"
    mod61 = pF "mod61"
    mod62 = pF "mod62"
    mod63 = pF "mod63"
    mod64 = pF "mod64"
    mod65 = pF "mod65"
    mod66 = pF "mod66"
    -- operator envelope generator levels
    eglevel11 = pF "eglevel11"
    eglevel12 = pF "eglevel12"
    eglevel13 = pF "eglevel13"
    eglevel14 = pF "eglevel14"
    eglevel21 = pF "eglevel21"
    eglevel22 = pF "eglevel22"
    eglevel23 = pF "eglevel23"
    eglevel24 = pF "eglevel24"
    eglevel31 = pF "eglevel31"
    eglevel32 = pF "eglevel32"
    eglevel33 = pF "eglevel33"
    eglevel34 = pF "eglevel34"
    eglevel41 = pF "eglevel41"
    eglevel42 = pF "eglevel42"
    eglevel43 = pF "eglevel43"
    eglevel44 = pF "eglevel44"
    eglevel51 = pF "eglevel51"
    eglevel52 = pF "eglevel52"
    eglevel53 = pF "eglevel53"
    eglevel54 = pF "eglevel54"
    eglevel61 = pF "eglevel61"
    eglevel62 = pF "eglevel62"
    eglevel63 = pF "eglevel63"
    eglevel64 = pF "eglevel64"
    -- operator envelope generator rates
    egrate11 = pF "egrate11"
    egrate12 = pF "egrate12"
    egrate13 = pF "egrate13"
    egrate14 = pF "egrate14"
    egrate21 = pF "egrate21"
    egrate22 = pF "egrate22"
    egrate23 = pF "egrate23"
    egrate24 = pF "egrate24"
    egrate31 = pF "egrate31"
    egrate32 = pF "egrate32"
    egrate33 = pF "egrate33"
    egrate34 = pF "egrate34"
    egrate41 = pF "egrate41"
    egrate42 = pF "egrate42"
    egrate43 = pF "egrate43"
    egrate44 = pF "egrate44"
    egrate51 = pF "egrate51"
    egrate52 = pF "egrate52"
    egrate53 = pF "egrate53"
    egrate54 = pF "egrate54"
    egrate61 = pF "egrate61"
    egrate62 = pF "egrate62"
    egrate63 = pF "egrate63"
    egrate64 = pF "egrate64"
    -- operator output levels
    amp1 = pF "amp1"
    amp2 = pF "amp2"
    amp3 = pF "amp3"
    amp4 = pF "amp4"
    amp5 = pF "amp5"
    amp6 = pF "amp6"
    -- operator frequency ratios
    ratio1 = pF "ratio1"
    ratio2 = pF "ratio2"
    ratio3 = pF "ratio3"
    ratio4 = pF "ratio4"
    ratio5 = pF "ratio5"
    ratio6 = pF "ratio6"
    -- operator frequency detuners
    detune1 = pF "detune1"
    detune2 = pF "detune2"
    detune3 = pF "detune3"
    detune4 = pF "detune4"
    detune5 = pF "detune5"
    detune6 = pF "detune6"
    -- lfo
    lfofreq = pF "lfofreq"
    lfodepth = pF "lfodepth"
    feedback = pF "feedback"
