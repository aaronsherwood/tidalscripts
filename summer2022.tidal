lock n offset = timeLoop n . ((offset |- (slow n $ run n)) <~)

tidal_version

hush

d1 $ sound (fastGap 3 "bd sn")

do
  let lkLength = 2
  let runOrRand = "<1 0>"
  let euc = "<3>" --"<9 12>"
  let divi = "8" --"<4 [16@1 8@3]>"--"16" --"<16 [16 8 8 8]>"
  let shiftAmount = 7 --"<1>"
  let runAmount = [0,1..40] -- [0,3..15] -- [0 .. 3]
  let sampleBank = (wchoose [("tabla",0.7), ("IGLOOGHOST_bass",0.3)])
  let playPat = (lock lkLength (parseBP_E ("<"++(unwords (map show [0..lkLength-1]))++">")) $ s sampleBank >|  n (select runOrRand [(parseBP_E ("{"++(unwords (map show runAmount ))++"}%"++divi)), (segment divi (irand 32))]))
  d1 $ slow 1 $ degradeBy 0.0 $ (struct (parseBP_E ("t("++euc++","++divi++")"))) $ playPat |+| n shiftAmount # cut 1 # room 0.96 # speed "0.5 2" # krush "1" # gain "1" # up 4 # orbit 1

  do
    let lkLength = 2
    let runOrRand = "<1 0>"
    let euc = "<3>" --"<9 12>"
    let divi = "8" --"<4 [16@1 8@3]>"--"16" --"<16 [16 8 8 8]>"
    let shiftAmount = 9 --"<1>"
    let runAmount = [0,1..40] -- [0,3..15] -- [0 .. 3]
    let sampleBank = (wchoose [("tabla",0.5), ("percussion",0.5)])--"[tabla, percussion]"
    let playPat = (lock lkLength (parseBP_E ("<"++(unwords (map show [0..lkLength-1]))++">")) $ s sampleBank >|  n (select runOrRand [(parseBP_E ("{"++(unwords (map show runAmount ))++"}%"++divi)), (segment divi (irand 32))]))
    d1 $ slow 1 $ degradeBy 0.0 $ (struct (parseBP_E ("t("++euc++","++divi++")"))) $ playPat |+| n shiftAmount # legato 5 # room 0.96 # speed "0.5 2" # krush "1" # gain 1 # up 4 # orbit 1

    do
      let lkLength = 2
      let runOrRand = "<1 0>"
      let euc = "<6 5 5 4>" --"<9 12>"
      let divi = "8" --"<4 [16@1 8@3]>"--"16" --"<16 [16 8 8 8]>"
      let shiftAmount = 100 --"<1>"
      let runAmount = [0,1..4] -- [0,3..15] -- [0 .. 3]
      let sampleBank = (wchoose [("tabla",0.5), ("percussion",0.5)])--"[tabla, percussion]"
      let playPat = (lock lkLength (parseBP_E ("<"++(unwords (map show [0..lkLength-1]))++">")) $ s sampleBank >|  n (select runOrRand [(parseBP_E ("{"++(unwords (map show runAmount ))++"}%"++divi)), (segment divi (irand 32))]))
      d1 $ slow 1 $ degradeBy 0 $ selectF (cF 0 "17") [struct "f", struct "t", struct "t*<2>", struct "t*<4>", struct "t*<8>"] $ (struct (parseBP_E ("t("++euc++","++divi++")"))) $ playPat |+| n shiftAmount  # legato 10 # room 0.96 # speed "0.5 2" # krush "1" # gain (1) # up 4 # orbit 1

chooseBy "0 0.25 0.5" ["a","b","c","d"]

(cT 0.5 "^18")

d1 $ (selectF (2/3) [struct "t*<8>", struct "t*<16>", struct "t*<24>"]) $ s "hh"

d1 $ lock (range 0.5 1.5 ("^17")) 0 $ s "pluck*8" # n (irand 20)

toRational <$> doublePattern

(cF 0.5 "^17")

d3 silence

d2 $ selectF ("^16") [lock 1.75 0, lock 1.50 0, lock 1 0, lock 0.75 0, lock 0.5 0] $ selectF ("^17") [struct "f", struct "t", struct "t*<2>", struct "t*<4>", struct "t*<8>", struct "t*<12>", struct "t*<16>", struct "t*<18>"] $ s "tabla2*16" # n (irand 48) # room 0.2

d2 $ selectF ("^18") [lock 0.5 0, lock 0.75 0, lock 1 0, lock 1.25 0, lock 1.75 0] $ selectF ("^17") [struct "f", struct "t", struct "t*<2>", struct "t*<4>", struct "t*<8>", struct "t*<12>", struct "t*<16>", struct "t*<18>"] $ s "tabla2*16" # n (irand 48) # room 0.2 # up "-4.9"


d2 $ selectF ("^18") [lock 0.5 0, lock 0.75 0, lock 1 0, lock 1.25 0, lock 1.75 0] $ s "tabla2*8" # n (irand 48) # room 0.2

d2 $ lock 1.75 0 $ s "tabla2*8" # n (irand 48) # room 0.2

d3 $ s "[808bd:1(5,8)?, ~ SOPHIE_snares:2*9?, hh*16?]" # room 0.4 # speed (range 4 0.5 saw) # krush 10 # gain 0.8


((range 0 48 ("^17")))

hush

$ struct "<t*8 t*4 t*2 t*2>"

-- elements sea
-- Eb/G Bb/F Bb/Gb  Db/Ab Bmaj#11/F# Eb7/G Gbmaj7

elementsSea = "<[g5,bf5,d6,ef6,f6] [f5,bf5,d6,ef6,f6] [fs5,bf5,d6,ef6,f6] [af5,c6,df6,ef6,f6] [fs5,b5,df6,ef6,f6] [g5,bf5,df6,ef6,f6] [gf5,bf5,df6,ef6,f6]  >"

elementsSeaBothDir = "<[g5,bf5,d6,ef6,f6] [f5,bf5,d6,ef6,f6] [fs5,bf5,d6,ef6,f6] [af5,c6,df6,ef6,f6] [fs5,b5,df6,ef6,f6] [g5,bf5,df6,ef6,f6] [gf5,bf5,df6,ef6,f6] [g5,bf5,df6,ef6,f6] [fs5,b5,df6,ef6,f6] [af5,c6,df6,ef6,f6] [fs5,bf5,d6,ef6,f6] [f5,bf5,d6,ef6,f6]>"

elementsSeaRev = "<[gf5,bf5,df6,ef6,f6] [g5,bf5,df6,ef6,f6] [fs5,b5,df6,ef6,f6] [af5,c6,df6,ef6,f6] [fs5,bf5,d6,ef6,f6] [f5,bf5,d6,ef6,f6] [g5,bf5,d6,ef6,f6]>"



d8 $ slow 1 $ struct "t(< 7 9 14 >,16)" $ n (arp "<thumbupdown pinkyupdown updown up >" ((elementsSea)-"<12>") ) # s "midi" # amp (range 0.5 0.7 rand) # sustain 0.8


d8 $ slow 1 $ struct "t(<6 5 11 3 7>,16)" $ n (arp "<thumbupdown pinkyupdown updown up >" (("[[gf3,bf5,df6,<gf6 af6 bb6 df5>]] ")-"<12>") ) # s "midi" # amp (range 0.5 0.7 rand) # sustain 1.1

d9 $ slow 1 $ struct "t(<3 6 10>,16)" $ n (arp "<thumbupdown pinkyupdown updown up >" (("[ef3,ef4]")-"<12>") ) # s "midi" # amp (range 0.5 0.8 rand) # sustain 1

d8 $ slow 1 $ struct "t(< 7  >,16)" $ n (arp "<thumbupdown >" (("[fs5,bf5,d6,ef6,f6] ")-"<12>") ) # s "midi" # amp (range 0.5 0.7 rand) # sustain 0.8

unsolo 8
unsolo 9
d9 silence




do
  hush
  d5 $ fast 0.5 $ s "elements_00_e_flat_sodium" # n ("<0 1 2 3 4 5 6 7 8 9 10>") # gain 1

do
  hush
  d6 $ fast 2 $ s "elements_01_b_flat_water" # n ("<0 1 2 3 4 5 6 7 8 9>") # gain 1

do
  hush
  d6 $ fast 1 $ s "elements_02_b_flat_S5_calcium" # n ("<0 1 2 3 4 5 6 7 8 9>") # gain 1 # pan 0.25
  d8 $ fast 1 $ s "elements_02_b_flat_S5_calcium" # n ("<10 12 13 14 15 16 17 18 19>") # gain 1 # pan 0.75 # nudge 0.45

do
  hush
  d9 $ fast 1 $ s "elements_03_d_flat_chlorine" # n ("<0 1 2 12 3 4 5 10 6 >") # gain 1 # pan 0.25
  d6 $ fast 1 $ s "elements_03_d_flat_chlorine" # n ("<14 7 8 9 11 13 15 16>") # gain 1 # pan 0.75 # nudge 0.45

do
  hush
  d6 $ fast 1.1 $ s "elements_04_b_magneisum" # n ("<6 7 8 9 10 11>") # gain 1 # pan 0.25
  d7 $ fast 1.5 $ s "elements_04_b_magneisum" # n ("<0 1 2 3 4 5 >") # gain 1 # pan 0.75 # nudge 0.45

do
  hush
  d6 $ fast 0.75 $ s "elements_05_e_flat7_sulfur" # n ("<0 1 2 11 12 13 14 15>") # gain 1 # pan 0.25
  d7 $ fast 0.9 $ s "elements_05_e_flat7_sulfur" # n ("<3 4 5 6 7 8 9 10>") # gain 1 # pan 0.75 # nudge 0.45

do
  hush
  d8 $ fast 0.6 $ s "elements_06_g_flat_potassium" # n ("<0 1 2 3 4 11 13 15 16 18>") # gain 1 # pan 0.25
  d9 $ fast 0.43 $ s "elements_06_g_flat_potassium" # n ("<9 10 5 6 7 8 12 14 17>") # gain 1 # pan 0.75 # nudge 0.45






hush



d7 $ fast 1 $ s "elements_e_flat_" # n ("<1>") # gain 1

d7 $ fast 3 $ s "elements_e_flat_water" # n (irand 10) # gain 1.2

d9 silence


hush

    do
      let lkLength = 4
      let runOrRand = "<1 0 0 0>"
      let euc = "<3>" --"<9 12>"
      let divi = "8" --"<4 [16@1 8@3]>"--"16" --"<16 [16 8 8 8]>"
      let shiftAmount = 9 --"<1>"
      let runAmount = [0,1..40] -- [0,3..15] -- [0 .. 3]
      let sampleBank = (wchoose [("tabla",0.5), ("percussion",0.5)])--"[tabla, percussion]"
      let playPat = (lock lkLength (parseBP_E ("<"++(unwords (map show [0..lkLength-1]))++">")) $ s sampleBank >|  n (select runOrRand [(parseBP_E ("{"++(unwords (map show runAmount ))++"}%"++divi)), (segment divi (irand 32))]))
      d1 $ slow 1 $ degradeBy 0.0 $ (struct (parseBP_E ("t("++euc++","++divi++")"))) $ playPat |+| n shiftAmount # legato 5 # room 0.96 # speed "0.5 2" # krush "1" # gain "1" # up 4 # orbit 1

:t timeLoop
-- notes
-- work to choose smaple bank,
-- shift amount button to choose random value as well as some set numbers to choose from, maybe do chooseBy to select which number
  -- could be 8 values stored in tidal that can be changed and chosen from the monome
-- degradeby - should be pattern so fine

  do
    let lkLength = 4--(cI 2 "len")-1 --2 -- (cF 0 "vocal0")
    let runOrRand = "<1>"
    let shiftAmount = (chooseBy "^shiftAmount" [0,77,10,4,100,15,20,87,98,75,120,340,8,5,12,40]) --(chooseBy "^shiftAmount" ["0","1","10","4","100","15","20","34","98","75","120","340"]) --"^shiftAmount" -- "<12 6 8 4>"
    let runAmount = [0,1..40] -- [0,3..15] -- [0 .. 3]
    let sampleBank = (wchoose [("tabla",0.8), ("IGLOOGHOST_bass",0.2)])
    let playPat = (lock lkLength (parseBP_E ("<"++(unwords (map show [0 .. lkLength]))++">")) $ s sampleBank >|  n (select runOrRand [(parseBP_E ("{"++(unwords (map show runAmount ))++"}%^div")), (segment "^div" (irand 32))]))
    -- "euc" is the osc route and is coming in directly in the mini notation as a state
    d1 $ degradeBy "^degradeIt" $ (struct ("t(^euc,^div)")) $ playPat |+| n shiftAmount # cut 1 # room 0.96 # speed "0.5 2" # krush "2" # gain "1" # up 7 # orbit 1


d3 $ slow 1 $ s "808bd:1? ~ sd ~" # krush 10 # speed (range "<2 1.5 1 1>" 1 saw) # gain (1*(cF 0 "beat0")) # up "<22@2 9 -3>" # room 0.5 # orbit 5

d2 $ degradeBy 0.0 $ whenmod 8 7 (density 2) $ jux (# n 5) $ s "[[arpy*<4@3 8 12 9 6@2>] [arpy*2?]]" # speed (density 1 $ range "-2" "6" saw) # up "<-12 0>" # gain 0.75 # room 0.9 # krush 20 # n (0) # legato 2 # orbit 3

d4 $ loopAt 4 $ randslice 8 $ chop 16 $ s "SOPHIE_loops:9" # room 0.1 # gain (1*(cF 0 "soph0")) # orbit 7

d5 $ s "hh*16" # room 0.5 # orbit 9 # gain ((range 0.5 1.2 rand)*(cF 0 "hh0"))

d4 silence

hush
