d5 $ degradeBy 0.0 $ sound "feel:6 feel:5*8? feel:3 feel:1" # room 0.4 # size 0.5 # slow 4 (speed (range 8 0.5 saw)) # gain "1.5" -- # nudge (range "-0.05" "0.05" rand)
d2 $ sound "casio:1*16" # up "-6" # slow 4 (speed (range 1 1.5 saw )) # gain (range 0.8 1.1 rand) # room 0.5 # size 0.5 -- # nudge (slow 4 (range 0.1 0.2 saw))
d3 $ every 2 (const $ sound "~ bd:3? sn:2 [~ bd:3?]" # gain "1.2" # room "1.0" # speed (range 8 1 saw)  ) $ sound "bd:3*8? bd:3? sn:2? [~ bd:3?]" # room 0.9 # size 0.5 # speed (range 8 1 saw) # nudge (range "-0.05" "0.05" rand)
d4 $ sound "[<feel:6? [~ feel:6]> <feel:3 feel:4>, feel:1*16?]" # room 0.3 # size 0.9 # gain "1.1" -- # nudge 0.02 --(range "-0.05" "0.05" rand)

d1 $ s "hh*8" # gain 1.6 # room 0.5 # nudge "0.19"


p "midiclock" $ midicmd "midiClock*48" # s "midi"
once $ midicmd "stop" # s "midi"
d9 $ midicmd "start" # s "midi"
d2 silence

setcps (80/60/4)
d4 $ s "hh*8" # gain 1.6  # nudge "-0.01"

setcps 0.25



p "piano" $ density 0.25 $ struct "t@5 t@4 t@3 t@4 t@5 t@4 t@3 t@4" $ n a  # s "arpy" # amp 0.7

p "piano" $ degradeBy (0.9) $ n "[b1(3,8,1), b3(8,16,2)]"  # s "midi" # amp (range 0.6 0.9 rand)

d6 $ degradeBy "0.9" $ sometimes ( fast 2) $ n "{d fs cs5 }%8" # s "midi*2" # amp (range 0.5 1.1 rand)
d7 $ slow 1 $ n "d2(3,8)" # s "midi" # amp "1 0.7 0.6"

p "piano" silence


d1 silence
d2 silence
d3 silence

do
  let lkLength = 2
  let runOrRand = "<1 0>"
  let shiftAmount = (chooseBy "^shiftAmount" [1,2,3,5,6,13,21,34,55,89,144,233,377,610,987,1597]) -- 1 --"<1>"
  let octave = (chooseBy "^upperPitch" [0.5,1,2,4,8,16])
  let runAmount = [0,1..40] -- [0,3..15] -- [0 .. 3]
  let sampleBank = (wchoose [("tabla",1.0), ("feel",0.1)])
  let playPat = (lock lkLength (parseBP_E ("<"++(unwords (map show [0..lkLength-1]))++">")) $ s sampleBank >|  n (select runOrRand [(parseBP_E ("{"++(unwords (map show runAmount ))++"}%^div")), (segment (range 1 16 "^div") (irand 32))]))
  d1 $ loopAt 2 $ mask "t(^euc,^div)" $ chop 32 $ s "flute" # n "16" # room 0.7 # speed "0.9" # gain "^playFlute"

do
  let lkLength = 2
  let runOrRand = "<1 0>"
  let shiftAmount = (chooseBy "^shiftAmount" [1,2,3,5,6,13,21,34,55,89,144,233,377,610,987,1597])
  let octave = (chooseBy "^upperPitch" [0.5,1,2,4,8,16])
  let runAmount = [0,1..40]
  let sampleBank = (wchoose [("tabla",1.0), ("feel",0.1)])
  let playPat = (lock lkLength (parseBP_E ("<"++(unwords (map show [0 .. lkLength]))++">")) $ s sampleBank >|  n (select runOrRand [(parseBP_E ("{"++(unwords (map show runAmount ))++"}%^div")), (segment "^div" (irand 32))]))
  d1 $ loopAt 2 $ mask "t(^euc,^div)" $ chop 32 $ s "flute" # n "16" # room 0.7 # gain "^playFlute" # speed "0.9"
  d2 $ degradeBy "^degradeIt" $ (struct ("t(^euc,^div)")) $ playPat |+| n shiftAmount # cut 1 # room 0.96 # speed "0.5 2" # krush "1.1" # gain "1" # up 7 # orbit 1
  d3 $ whenmod 1 "^fill" (const $ fast "<2 [2 3 3]>" $ s "gretsch" <| n (slow 1 "{0 1 2 3 4 5 6 7 8 9 10 11 12}%8") # gain (slow 2 (range 1.1 1.2 rand)) # room 0.4 # speed (slow 2 (range 3 5 saw))) $ fast 2 $ s "gretsch" <| n "[<13 22> ,[~ 19]/2]" # speed (range 2 5 "^upperPitch") # room 0.4 # gain "^playDrums"

  d2 $ degradeBy "^degradeIt" $ (struct ("t(^euc,^div)")) $ playPat |+| n shiftAmount # cut 1 # room 0.96 # speed "0.5 2" # krush "1.1" # gain "1" # up 7 # orbit 1


  d2 $ slow 0.5 $ degradeBy "^degradeIt" $ (struct ("t(^euc,^div)")) $ playPat |+| n shiftAmount # cut 1 # room 0.96 # speed octave # krush "1" # gain "^playTabla" # up 4 # orbit 1 -- # nudge (range "-0.05" "0.05" rand)

  d3 $ whenmod 1 "^fill" (const $ fast "<2 [2 3 3]>" $ s "gretsch" <| n (slow 1 "{0 1 2 3 4 5 6 7 8 9 10 11 12}%8") # gain (slow 2 (range 1.1 1.2 rand)) # room 0.4 # speed (slow 2 (range 3 5 saw))) $ fast 2 $ s "gretsch" <| n "[<13 22> ,[~ 19]/2]" # speed (range 2 5 "^upperPitch") # room 0.4 # gain "^playDrums"
  d2 $ degradeBy "^degradeIt" $ (struct ("t(^euc,^div)")) $ playPat |+| n shiftAmount # cut 1 # room 0.96 # speed "0.5 2" # krush "1.1" # gain "1" # up 7 # orbit 1

playChords c2 "midi" ["@1","@2","@5","@1","@3","@2","@2"]
arpChords c2 "rash" ["@1","@2","@5","@1","@3","@2","@2"]
arpChords c2 "midi" ["@1","@2","@5","@1","@3","@2","@2"]



p "piano" silence
d4 silence





playChords :: [Char] -> [Char] -> [String] -> IO ()
playChords progression which rhythms=
  do
    let chords = do {
      if length (rhythms) < length (words progression)
        then do
          take (length rhythms) (words progression)
      else do
          (words progression)
      }
    let combined = merge chords rhythms
    let final = unwords combined
    if which == "midi"
      then
        p "piano" $ density 0.25 $ s (parseBP_E which) <| n (parseBP_E final+"-4") # amp (range (0.0+"^midiVolume") (0.1+"^midiVolume") (rand)) -- # nudge "-0.01"
      else
        p "piano" $ degradeBy 0.0 $ density 0.25 $ s (parseBP_E which) <| up (parseBP_E final+"-4") # room 0.7 # orbit 1 # gain 0.8


arpChords :: [Char] -> [Char] -> [String] -> IO ()
arpChords progression which rhythms=
  do
    let chords = do {
      if length (rhythms) < length (words progression)
        then do
          take (length rhythms) (words progression)
      else do
          (words progression)
      }
    let combined = merge chords rhythms
    let final = unwords combined
    if which == "midi"
      then
        d4 $ density 0.25 $ arp "down" $ s (parseBP_E which) <| n (parseBP_E final+"-4") # amp (range (0.0+"^midiVolume") (0.1+"^midiVolume") (rand)) -- # nudge "-0.01"
      else
        d4 $ degradeBy 0.0 $ density 0.25 $ arp "down" $ s (parseBP_E which) <| up (parseBP_E final+"-4") # room 0.7 # orbit 1 # gain 1 # speed "16"



  allRunAmounts = [
    "<16 <4 3> 16 8>", -- 0
    "<32!2 8 16>", -- 1
    "<15 30>" -- 2
    ]
  allLocations = [
    "2", -- 0
    "14", -- 1
    "15", -- 2
    "21", -- 3
    "24", -- 4
    "32" -- 5
    ]
  allGainBases = [
    "1", -- 0
    "1(3,8)", -- 1
    "{1(2,5)}%5", -- 2
    "1(12,16)", -- 3
    "{1(2,5)}%15" -- 4
    ]
  allGainMults = [
    "1", -- 0
    "0", -- 1
    "<[1]!3 [1 <1 0>]>", -- 2
    "<[1] [1 <1 0>]>", -- 3
    "<1 [1 1 1? 0] 1 [1 0 1 0]>" -- 4
    ]
  heartChant r l b m =
    do
      let runAmounts = allRunAmounts!!r
      let location = allLocations!!l
      let gainBase = allGainBases!!b
      let gainMult = allGainMults!!m
      p "heartChant" $ swingBy (1/3) 16 $ slice 240 (segment 16 ((run 32)*(run runAmounts)+(location)))  $ sound "aaron*240" # cut 1 # orbit 11 # room 0.1 # up "-1" # gain (gainBase*gainMult) # nudge "0.195"

  heartChant 0 0 1 0
  heartChant 0 0 2 0
  heartChant 0 0 4 0
  heartChant 2 0 2 3
  heartChant 2 0 0 0
  heartChant 1 5 3 0
  heartChant 0 1 0 0
  heartChant 0 2 0 0
  heartChant 0 3 0 0
  heartChant 0 4 0 0
  heartChant 0 0 0 4

  heartChant 0 0 0 2
  heartChant 0 0 0 1

  chordProg 0 0 0

  p "heartChant" silence
